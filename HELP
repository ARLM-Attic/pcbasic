PC-BASIC 3.23 REFERENCE
Copyright (c) 2014 Rob Hagemans.
This file is licensed under a 
Creative Commons Attribution-ShareAlike 4.0 International License.


EDITING
-------
The screen is divided into 'logical lines' whose length can exceed the width
of the physical line. The logical line includes all the text on the line. If 
the line has been wrapped or broken by <CTRL+J>, the logical line extends 
into the next physical line. 
The following keys have a special effect:
<UP> or <CTRL+6>            Move the cursor up, except at line 1.
<DOWN> or <CTRL+->          Move the cursor down, except at line 24. Line 25
                            cannot be reached with the arrow keys. 
<LEFT> or <CTRL+]>          Move the cursor left. The left edge of the screen 
                            wraps around, except at line 1.
<RIGHT> or <CTRL+/>         Move the cursor right. The right edge of the 
                            screen wraps around, except at line 24.
<CTRL+LEFT> or <CTRL+B>     Move to the first letter of the previous word. A 
                            word consists of letters A-Z and figures 0-9.
<CTRL+RIGHT> or <CTRL+F>    Move to the first letter of the next word.
<TAB> or <CTRL+I>           Move the cursor to the next tab stop. Tab stops
                            are 8 columns wide.
<BACKSPACE> or <CTRL+H>     Delete the character left of the cursor, shift 
                            all further characters on the logical line one 
                            position to the left and change the attributes of 
                            those characters to the current attribute. At the 
                            left edge of the screen, this does the same as 
                            <DEL>.
<DEL> or <CTRL+BACKSPACE>   Delete the character at the cursor and shift all 
                            further characters one position to the left, 
                            changing attributes to current.
<ESC> or <CTRL+[>           Delete the current logical line
<CTRL+END> or <CTRL+E>      Delete all characters from the cursor to the end 
                            of the logical line.
<CTRL+BREAK> or <CTRL+C>    Jump to the first column of the next line, 
or <CTRL+SCROLL_LOCK>       without executing or storing the line under the 
                            cursor.
<ENTER> or <CTRL+M>         Execute or store the current screen line. The 
                            complete line on the screen is considered part of 
                            the command, including any text you did not type. 
                            A line starting with a number is stored as a 
                            program line.
<END> or <CTRL+N>           Move the cursor to the first position after the 
                            end of the logical line.
<HOME> or <CTRL+K>          Move the cursor to the top left of the screen.
<CTRL+HOME> or <CTRL+L>     clear the screen and move the cursor to the top 
                            left of the screen.
<CTRL+ENTER> or <CTRL+J>    Move to the first column of the next line, 
                            connecting the two lines into one logical line.
<CTRL+G>                    Beep.
<PAUSE> or <CTRL+NUM_LOCK>  Pause. Press another key to resume.
<CTRL+PRT_SC>               Echo screen output to the printer.
<SHIFT+PRT_SC>              Print the screen.
<INS> or <CTRL+R>           Toggle INSERT mode. In INSERT mode, characters  
                            are inserted rather than overwritten at the 
                            current location. If insertion causes the line to 
                            extend the physical screen width, the logical 
                            line extends onto the next line. Arrow keys exit 
                            INSERT mode.


PROGRAMS
--------
A program line is entered by starting a line with a line number. All program 
lines must have a line number. Line numbers range from 0 to 65535 inclusive.
It is not possible to enter a line number higher than 65529, but these can 
exist in loaded programs. Lines between 65530 and 65535 are not visible in 
the program's LIST.
Within one program line, statements are separated by colons (:). The maximum
length of a program line is 255 characters.


ERROR CODES
-----------
1   NEXT without FOR
2   Syntax error
3   RETURN without GOSUB
4   Out of DATA
5   Illegal function call
6   Overflow
7   Out of memory
8   Undefined line number
9   Subscript out of range
10  Duplicate Definition
11  Division by zero
12  Illegal direct
13  Type mismatch
14  Out of string space
15  String too long
16  String formula too complex
17  Can't continue
18  Undefined user function
19  No RESUME
20  RESUME without error
21
22  Missing operand
23  Line buffer overflow
24  Device Timeout
25  Device Fault
26  FOR without NEXT
27  Out of paper
28
29  WHILE without WEND
30  WEND without WHILE
31--49
50  FIELD overflow
51  Internal error
52  Bad file number
53  File not found
54  Bad file mode
55  File already open
56
57  Device I/O error
58  File already exists
59--60
61  Disk full
62  Input past end
63  Bad record number
64  Bad file name
65
66  Direct statement in file
67  Too many files
68  Device Unavailable
69  Communication buffer overflow
70  Permission Denied
71  Disk not Ready
72  Disk media error
73  Advanced Feature
74  Rename across disks
75  Path/File access error
76  Path not found
Any error code that does not have a message associated to it will generate
the message "Unprintable error".


LITERALS
--------
String literals can be specified between double quotes. There is no escaping
mechanism. To include a double quote or a special character in a string, use
the CHR$() function.
Numeric literals:
  [+|-] [figures] [.] [figures] [ E|D [+|-] [figures] | # | ! | % ]
Trailing % is ignored, ! or # specify the type.
Examples of valid numeric literals:
  -1
  42
  42!
  42#
  1.3523523
  .235435
  -.3
  3.
  .         (this equals 0!)
  .e        (0!)
  .D        (0#)
  1.1e+7
  1.1d+7
  1e2
  1e-2
Hexadecimal literals can be specified like &HFFFF. They must range between 
-&H7FFF and &HFFFF. &HFFFF = -&H1 = &H-1 .
Octal literals can be specified as &o777.


VARIABLES
---------
Variable names must start with a letter; all chaacters of the variable name
(except the type character) must be letters (A-Z), figures (0-9), or a dot (.)
Only the first 40 characters in the name are significant.
PC-BASIC recognises four variable types, distinguished by their type character
which is the last character of the variable's name:
char    type                    size
 $      string                  3 bytes plus allocated string space
 %      integer                 2 bytes 
 !      single-precision float  4 bytes
 #      double-precision float  8 bytes 
If the type character is not specified, the first letter of the name determines
the type through DEFINT/DEFSTR/DEFSNG/DEFDBL. Unless otherwise specified, all
variables are single-precision floats.
Internal representation:
-  Line numbers are two-byte unsigned little-endian.
-  Integers are two-byte signed little-endian two's complement ints.
-  Booleans are represented as 0 (FALSE); -1 or other non-zero (TRUE). 
-  Floats are represented in the Microsoft Binary Format (MBF). This is a non-
   IEEE representation.


ARRAYS
------
Arrays of any type can be generated. Arrays are indexed with round or square 
brackets; even mixing brackets is allowed. The following work: A[0] A(0) 
A(0] A[0). Multidimensional arrays are specified with commas: A(0,0) etc.
By default, arrays are counted from 0. This can be changed to 1 using 
 OPTION BASE 1. Arrays can be allocated using DIM. If all indices of the array
are 10 or less, arrays can be used without using the DIM command. The first 
referencing of the array (read or write) will automatically dimension it with 
a maximum index of 10 and the same number of indices as in the first 
referencing. To re-allocate an array, first the old array must be deleted 
through CLEAR or ERASE.


OPERATORS
---------
Order of precedence:    
    ^	Exponentiation
    -	Negation
    *	Multiplication  
    /	Floating-point Division   \   Integer division   MOD  Integer modulo
    +	Addition   - Subtraction
NOTE: Exponentiation is tighter bound than negation: -1^2 = -1 but (-1)^2 = 1.
Relational:
    =       Equal
    <> ><   Not equal
    <       Less than
    >       Greater than
    <= =<   Less than or equal
    >= =>   Greater than or equal
Boolean:
    NOT, AND, OR, XOR, EQV, IMP


INTERNAL REPRESENTATION OF NUMBERS AND THE MICROSOFT BINARY FORMAT
------------------------------------------------------------------


ATTRIBUTES, PALETTES AND COLOURS
--------------------------------





ABS(x) function
---------------
Returns the absolute value of 'x'. 'x' is an expression with a numeric value.
If 'x' has a string value, ABS raises TYPE MISMATCH.


ASC(x) function
---------------
Returns the ASCII code for the first character of x. x is an expression with 
a string value.
ERRORS:
-   If 'x' has a numeric value, ASC raises TYPE MISMATCH.
-   If 'x' equals "", ASC raises ILLEGAL FUNCTION CALL.


ATN(x) function
---------------
Returns the inverse tangent of x. 'x' is a numeric-valued expression that gives 
the angle in radians. Unless BASIC is run with the --double option, ATN(x) 
returns a single-precision value.
NOTES:
-   ATN(1) differs in the least significant digit from GW-BASIC.
ERRORS:
-   If 'x' has a string value, ATN raises TYPE MISMATCH.


AUTO statement
AUTO [line_number | .] [, [increment]] 
--------------
Enter automatic line numbering mode (AUTO mode). In AUTO mode, line numbers 
are automatically generated when <ENTER> is pressed.
Line numbering starts at 'line_number', if specified. If . is specified, line 
numbering starts at the last program line that was stored. Otherwise, line
numbering starts at 10. 
Each next line number is incremented by 'increment', if specified. If a comma 
is used withoud specifying an increment, the last increment specified in an 
AUTO command is used. If not, increment defaults to 10.
If a program line exists at a generated line number, a '*' is shown after the 
line number. To avoid overwriting this line, leave it empty and press <ENTER>.
To exit AUTO mode, press <CTRL+BREAK> or <CTRL+C>. The line being edited at 
that point is not saved. BASIC will return to command mode, even if AUTO was 
run from a program line.
ERRORS:
-  If line_number is not an unsigned-integer value between 0 and 65529, 
   inclusive, SYNTAX ERROR is raised.
-  In AUTO mode, pressing <ENTER> on an empty line with number larger than 
   65519, UNDEFINED LINE NUMBER is raised.


BEEP statement
BEEP
--------------
Beeps at 800Hz for 0.25s.


BLOAD statement
BLOAD filename [, offset]
---------------
Raises ADVANCED FEATURE.
NOTES:
-  In GW-BASIC, BLOAD loads an image file into memory. 
   This is not implemented in PC-BASIC 3.23.   


BSAVE statement
BSAVE filename, offset, length
---------------
Raises ADVANCED FEATURE.
NOTES:
-  In GW-BASIC, BSAVE saves a region of memory to an image file. 
   This is not implemented in PC-BASIC 3.23.  


CALL statement
CALL address, variables
--------------
Raises ADVANCED FEATURE.
NOTES:
-  In GW-BASIC, CALL executes a machine language subroutine.
   This is not implemented in PC-BASIC 3.23.  


CDBL(x) function
----------------
Converts the numeric-valued expression 'x' to a double-precision value.
ERRORS:
-  If 'x' has a string value, TYPE MISMATCH is raised.


CHAIN statement
CHAIN [MERGE] program [, [line_number] [, [ALL] [, DELETE range]]]
---------------
Loads 'program' into memory and runs it, optionally transferring variables.
If 'line_number' is specified, it must be a numeric-valued expression. It 
will be interpreted as a line number is the new program. If 'line_number' is
negative, it will be interpreted as its two's-complement. 
If ALL is specified, all variables are transferred. If not, the variables 
specified in a COMMON statement are transferred. 
IF MERGE is specified, 'program' is merged into the existing program. To be 
able to use this, 'program' must be saved as ASCII.
If DELETE is specified, the 'range' of line numbers is deleted from the 
existing code before the merge. This is pointless without MERGE.


CHDIR statement
CHDIR pathname
---------------
Change the working directory to 'pathname'. 'pathname' is a string-valued 
expression which can be absolute or relative to the current path. 'pathname'
must be specified with MS-DOS path separators (\). CHDIR first looks for the
exact, case-sensitive (on Unix) path 'pathname'; if this does not exist then
an uppercase version truncated to 8.3 is attempted.
ERRORS:
-  If no matching path is found, PATH NOT FOUND is raised.
-  If 'pathname' is not string-valued, TYPE MISMATCH is raised.
-  If 'pathname' is empty, BAD FILE NAME is raised.


CHR$(x) function
----------------
Returns the character with ASCII code 'x'. 'x' must have a numeric value 
between 0 and 255 (inclusive). 
ERRORS:
-  If 'x' is a string value, TYPE MISMATCH is raised.
-  If 'x' is not -32768<=x<=32767, OVERFLOW is raised.
-  If 'x' is not 0<=x<=255, ILLEGAL FUNCTION CALL is raised.


CINT(x) function
----------------
Converts the numeric-valued expression 'x' to a signed integer.
ERRORS:
-  If 'x' is a string value, TYPE MISMATCH is raised.
-  If 'x' is not -32768<=x<=32767, OVERFLOW is raised.


CIRCLE statement
CIRCLE (x, y), radius [, [colour] [, [start] [, [end] [, aspect] ] ]
----------------
Draw an ellipse or ellipse sector. The midpoint of the ellipse is at 'x','y'.
'radius' is the radius, in pixels, along the long axis.
'colour' is the colour attribute.
If 'start' and 'end' are specified, a sector of the ellipse is drawn from 
'start' radians to 'end' radians, with zero radians the intersection with the 
right-hand x axis. If a negative value is specified, the arc sector is 
connected by a line to the midpoint.
'aspect' specifies, the ratio between the y radius and the x radius. If it is
not specified, the standard value for the SCREEN mode is used (see there), so
as to make the ellipse appear like a circle on the original hardware. 
NOTES: 
-  The rectangular pixels of some screen modes are currently not faithfully 
   reproduced by PC-BASIC 3.23, making default circles look like ellipses.
-  For 'aspect'<>1, the midpoint algorithm used does not pixel-perfectly 
   reproduce GW-BASIC's ellipses.
ERRORS:
-  In text mode (SCREEN 0), CIRCLE raises ILLEGAL FUNCTION CALL.
-  If 'start' or 'end' is not between 0 and 2pi, ILLEGAL FUNCTION CALL raised.
-  If the statement ends with a comma, MISSING OPERAND is raised.


CLEAR statement
CLEAR [expr] [, [mem_limit] [, stack_size] ]
---------------
Sets all variables to null. Closes all files. Clears all DEF FN functions. 
Clears all COMMON declarations. Turns off all sound. Resets music foreground.
Turns PEN and STRIG off. Clears all ON ERROR traps. Resets ERR and ERL to zero.
Resets the random number generator.
NOTES:
-  In GW-BASIC, 'mem_limit' specifies the upper limit of usable memory, and 
   'stack_size' specifies the amount of memory available to the stack and to
   string space. These are not implemented.
-  In GW-BASIC, If 'mem_limit' or 'expr' are too low, OUT OF MEMORY is raised.
-  The purpose of 'expr' is unknown.
ERRORS:
-  If 'mem_limit' or 'stack_size' equal 0, ILLEGAL FUNCTION CALL is raised.
-  If 'expr' is negative, ILLEGAL FUNCTION CALL is raised.
-  If 'expr','mem_limit','stack_size' are not in [-32768, 32767], OVERFLOW.


CLOSE statement
CLOSE [[#] file_1 [, [#] file_2 [, ...] ]
---------------
Closes files. 'file_1', 'file_2' etc are numeric-valued expressions yielding 
file numbers. If no file numbers are specified, all open files are closed.
The hash (#) is optional and has no effect.
ERRORS:
-  If 'file_1' etc. is not an open file, no error is raised.
-  If 'file_1' etc. is string-valued, TYPE MISMATCH is raised.
-  If an error occurs, the files before the erratic value are closed.
-  If the statement ends in a comma, MISSING OPERAND is raised.


CLS statement
CLS [x][,]
------------
Clears the screen or part of it. 
'x' is a numeric valued expression:
-  If 'x' equals 0, the whole screen is cleared.
-  If 'x' equals 1, the graphics view region is cleared.
-  If 'x' equals 2, the text view region is cleared.
If 'x' is not specified, in SCREEN 0 the text view region is cleared;
in other screens, the graphics view region is cleared.
The comma is optional and has no effect.
ERRORS:
-  If 'x' is string valued, TYPE MISMATCH is raised.
-  If 'x' is not 0,1, or 2, ILLEGAL FUNCTION CALL is raised.
-  If 'x' is not in [-32768, 32767], OVERFLOW is raised.
-  If no comma is specified but more text follows, ILLEGAL FUNCTION CALL.
-  If a comma is specified followed by more, SYNTAX ERROR.
-  If an error occurs, the screen is not cleared.


COLOR statement
COLOR [foreground] [, [background] [, border] ]    (in SCREEN 0)
COLOR [palette_0] [, palette]                      (in SCREEN 1)
COLOR [foreground] [, palette_0]                   (in SCREEN 7,8,9)
---------------
Changes the current colour attributes and/or palette colours. The syntax and
working of this command are different in different SCREEN modes.
In SCREEN 0 (text mode):
    'foreground' is a numeric expression with a value between 0 and 31 (incl.)
    This specifies the new foreground attribute. Attributes 16--31 incl. are 
    blinking versions of attributes 0--15 incl.
    'background' is a numeric expression with a value between 0 and 15 (incl.)
    This specifies the new background attribute. It is taken MOD 16: Values 
    8--15 incl. produce the same colour as 0--7 incl.
    'border' is a numeric expression between 0 and 15 (incl.). This is 
    optional and has no effect.
    All new characters printed will take the newly set attributes. Existing
    characters on the screen are not affected.
In SCREEN 1 (CGA graphics):
    'palette_0' is a numeric expression with a value between 0 and 255 (incl.)
    This sets the palette colour associated with attribute 0; by default, the
    background has this attribute. All pixels with this attribute will 
    change colour. The palette colour value is taken from the VGA 64-colour
    set. 'palette_0' is taken MOD 64.  
    'palette' is a numeric expression with a value between 0 and 255 (incl.)
    If 'palette' is odd, the standard CGA palette (cyan, magenta, grey) is set.
    If 'palette' is even, the alternative palette (green, red, brown) is set.
    All pixels with attributes 1,2,3 will change colour to the new palette.
In SCREENs 7,8,9:
    'foreground' is a numeric expression with a value between 1 and 15 (incl.)
    This sets the new foreground attribute. This applies only to new characters
    printed or pixels plotted.
    'palette_0' is a numeric expression with a value between 0 and 15 (incl.)
    This sets the palette colour associated with attribute 0; by default, the
    background has this attribute. All pixels with this attribute will 
    change colour. 
    In SCREEN 7 and 8, the 'palette_0' colour is taken from the first 8 of 
    the 16-colour EGA set. 'palette_0' is taken MOD 8.
    IN SCREEN 9, the palette colour value is taken from the 64-colour VGA set.
NOTES:
-   In GW-BASIC, the 'border' value in SCREEN 0 sets the attribute of the 
    screen border. This is not implemented in PC-BASIC 3.23.     
ERRORS:
-   If any of the parameters has a string value, TYPE MISMATCH is raised.
-   If any of the parameters is not in [-32768,32667], OVERFLOW is raised.
-   In SCREEN 0, if 'foreground' is not in [0,31], 'background' is not in 
    [0,15] or 'border' is not in [0,15], ILLEGAL FUNCTION CALL is raised.
-   In SCREEN 1, if any of the parameters is not in [0,255], ILLEGAL FUNCTION
    CALL is raised.
-   In SCREEN 2, ILLEGAL FUNCTION CALL is raised.         
-   In SCREENs 7,8,9, if 'foreground' is not in [1,15] or 'background' is not
    in [0,15], ILLEGAL FUNCTION CALL is raised.
    
 
COM(port) statement
COM(port) [ ON | OFF | STOP ]
----------------
When using ON, enables ON COM(x) event trapping of the emulated serial port. 
When using OFF, disables trapping.
When using STOP, halts trapping until COM(x) ON is used. Events that occur 
while trapping is halted will trigger immediately when trapping is re-enabled.
'port' is a numeric expression with a value of 1 or 2. This specified which
serial port (COM1: or COM2:) is trapped.


COMMON statement
COMMON [ [var_0] [, [var_1] [, [...] ] ] ]
----------------
Specifies variables to be passed as common variables to the program called 
with CHAIN. 'var_0', 'var_1', ... are names of variables or arrays. Array names
must be followed by round or square brackets. Brackets may also be mixed (] [).
The statement may end with one or more commas. 


CONT statement
CONT [ anything ]
--------------
Resumes execution of a program that has been halted by STOP, END, <CTRL+C>, or 
 <CTRL+BREAK>.
ERRORS:
-   If no program is loaded, a program has not been run, after a program line 
    has been modified and after CLEAR, CONT raises CAN'T CONTINUE.
-   If the break occurred in a direct line, CONT raises CAN'T CONTINUE    


COS(x) function
---------------
Returns the cosine of 'x'. 'x' is a numeric-valued expression that gives the 
angle in radians. 
Unless BASIC is run with the --double option, COS(x) returns a 
single-precision value.
NOTES:
-   COS(x) usually differs from the value returned by GW-BASIC. For one-digit 
    values, the difference is only in the least significant figure, but it
    increases with the size of the angle.
ERRORS:
-   If 'x' has a string value, COS raises TYPE MISMATCH.
     

CSNG(x) function
----------------
Converts the numeric-valued expression 'x' to a single-precision value.
ERRORS:
-   If 'x' has a string value, CSNG raises TYPE MISMATCH.


CSRLIN function
---------------
Returns the screen row of the cursor on the active page. 
CSRLIN is between 1 and 25, inclusive. Note that CSRLIN has no brackets.


CVI(x) function
---------------
Converts a two-byte string to a signed integer.
'x' should be a string-valued expression that represents an integer using
little-endian two's complement encoding. Only the first two bytes are used.
ERRORS:
-   If 'x' has a number value, TYPE MISMATCH is raised.


CVS(x) function
---------------
Converts a four-byte string to a single-precision floating-point number.
'x' should be a string-valued expression that represents a single-precision
number in Microsoft Binary Format.. Only the first four bytes are used.
ERRORS:
-   If 'x' has a number value, TYPE MISMATCH is raised.


CVD(x) function
---------------
Converts an eight-byte string (internal representation) to a single.
'x' should be a string-valued expression. Only the first eight bytes are used.
ERRORS:
-   If 'x' has a number value, TYPE MISMATCH is raised.
 

DATA statement
DATA [ [const_0] [, [const_1] [, ... ]
--------------
Specifies the data that can be read by the READ statement. 'const_0', ...
are string and number literals or may be empty. String literals can be given
with or without quotation marks. If quotation marks are omitted, leading and
trailing whitespace is ignored and commas or colons will terminate the data
statement.
ERRORS:
-   If the type of the literal does not match that of the corresponding READ 
    statement, a SYNTAX ERROR occurs on the DATA statement.
    

DATE$ function
--------------
Returns the system date as a string in the format "mm-dd-yyyy".
Note that DATE$ has no brackets.


DATE$ statement
DATE$=date
---------------
Sets the system date. 'date' is a string-valued expression that represents a 
date in one of the formats: "mm-dd-yyyy", "mm/dd/yyyy", "mm-dd-yy", "mm/dd/yy".
Of these, mm must be in [01, 12], dd must be in [01, 31]. If specified as yyyy,
the year must be in [1980, 2099]. If specified as yy, the year must be in the
range [00, 77], in which case it is interpreted as 2000--2077, or in the range
 [80, 99], which is interpreted as 1980-1999.
NOTES:
-   The system date is not actually changed; rather, PC-BASIC remembers the 
    offset from the true system date. This avoids requiring user permission
    to change the system time
-   GW-BASIC appears to accept invalid dates such as "02-31-2000". PC-BASIC
    raises ILLEGAL FUNCTION CALL for these.
ERRORS:
-   If the value of 'date' is not in the format specified above, DATE$ raises
    ILLEGAL FUNCTION CALL.
-   If 'date' yields a numeric value, TYPE MISMATCH is raised.


DEF FN statement
DEF FN name[( arg_0 [, arg_1 [, ...] )] = expression
----------------
Defines a function. 'name' must be a legal variable name. The function will 
then be called FNname (or FN name). Spaces between FN and name are optional.
'arg0', ... must be legal variable names; these are the parameters of the
function. 'expression' must be a legal PC-BASIC expression that may use the
parameters 'arg_0', 'arg_1', ... . On calling FNname(...), 'expression' is 
evaluated with the supplied parameters substituted. The result of the 
evaluation is then the value of FNname.


DEFINT statement
DEFINT letters
----------------
Sets the default type for variables starting with 'letters' to integer (%). 
This is the type that is assumed if no type character is specified. 'letters' 
are letters of the alphabet separated by commas or ranges specified with a 
dash: for example, DEFINT A,B,C-Z


DEFDBL statement
DEFDBL letters
----------------
Sets the default type for variables starting with 'letters' to double (#). 
This is the type that is assumed if no type character is specified. 'letters' 
are letters of the alphabet separated by commas or ranges specified with a 
dash: for example, DEFDBL A,B,C-Z


DEFSNG statement
DEFSNG letters
----------------
Sets the default type for variables starting with 'letters' to single (!). 
This is the type that is assumed if no type character is specified. 'letters' 
are letters of the alphabet separated by commas or ranges specified with a 
dash: for example, DEFSNG A,B,C-Z. DEFSNG A-Z is the default setting.


DEFSTR statement
DEFSTR letters
----------------
Sets the default type for variables starting with 'letters' to string ($). 
This is the type that is assumed if no type character is specified. 'letters' 
are letters of the alphabet separated by commas or ranges specified with a 
dash: for example, DEFSTR A,B,C-Z.


DEF SEG statement
DEF SEG [=address]
-----------------
Does nothing. 'address' is a numeric-valued expression in [-32768, 65535].
NOTES:
-   In GW-BASIC, sets the segment address to be used by BLOAD, BSAVE, CALL, 
    PEEK, POKE, or USR. This is not implemented in PC-BASIC.
-   If 'address' is negative, it is interpreted as its two's complement.
-   If 'address' is not specified, the segment is set to the GW-BASIC data
    segment.
ERRORS:
-   If 'address' is not in [-32768, 65535], OVERFLOW is raised.
-   If 'address' has a string value, TYPE MISMATCH is raised.


DEF USR statement
DEF USR[n] = address
-----------------
Does nothing. 'n' is a digit between 0 and 9 inclusive. 'address' is a numeric-
valued expression in [-32768, 65535].
NOTES:
-   In GW-BASIC, sets the starting address of an assembly-language function. 
    This is not implemented in PC-BASIC.
-   If 'address' is negative, it is interpreted as its two's complement.
ERRORS:
-   If 'address' is not in [-32768, 65535], OVERFLOW is raised.
-   If 'address' has a string value, TYPE MISMATCH is raised.

 
DELETE statement
DELETE [ [line_number_0] - [line_number_1] ]
DELETE [line_number_0]
----------------
Deletes lines from the program, starting with 'line_number_0' up to 
'line_number_1', which must be line numbers in the range [0, 65529] or a .
to indicate the last line edited.
ERRORS:
-   If a line number is greater than 65529, SYNTAX ERROR is raised.
-   If the range specified does not include any program lines stored, DELETE
    raises ILLEGAL FUNCTION CALL.
    
    
DIM statement
DIM name [ ( | [ ] limit_0 [, limit_1 [, ...] ] [ ) | ] ]   
-------------
Dimensions (allocates memory for) arrays. 'name' is a legal variable name
specifying the array to be dimensioned. 'limit_0', ... are number-valued 
expressions that specify the greatest index allowed at that position. Mixed
brackets are allowed. The least index allowed is determined by OPTION BASE.
The DIM statement also fixes the number of indices of the array. 
An array can only de dimensioned once; to re-dimension an array, ERASE or 
 CLEAR must be executed first. 
If an array is used without a DIM statement, its maximum indices are set at
10 for each index position used.
NOTES:
-   The size of arrays is limited by the available memory. In GW-BASIC, an 
    OUT OF MEMORY is raised if the array exceeds the size of available variable
    space. This is not currently implemented in PC-BASIC.
-   The maximum number of indices is, theoretically, 255. However, in practice,
    it is limited by the 255-byte limit on the length of program lines.
ERRORS:
-   If 'name' has already been dimensioned, DUPLICATE DEFINITION is raised.
-   If no indices are specified, SYNTAX ERROR is raised.
-   If 'limit_0', ... are not within [-32768, 32767], OVERFLOW is raised.        
-   If 'limit_0', ... are negative, ILLEGAL FUNCTION CALL is raised.



