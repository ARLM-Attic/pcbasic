#!/usr/bin/env python

#
# PC-BASIC 3.23 
#
# GW-BASIC (R) compatible interpreter 
# 
# (c) 2013, 2014 Rob Hagemans 
#
# This file is released under the GNU GPL version 3. 
# please see text file COPYING for licence terms.
#
# GW-BASIC is a trademark of Microsoft Corporation.

import sys
import os
from functools import partial

import plat

# do we log to a file? 
logfile = ''

import logging

import config
import run
import error
import oslayer
import unicodepage
import console
import backend
import backend_cli
import sound
import nosound
import nopenstick
import program
import state
import iolayer
import var

greeting = 'PC-BASIC 3.23%s\r(C) Copyright 2013, 2014 PC-BASIC authors. Type RUN "@:INFO" for more.\r%d Bytes free\rOk\xff'

def main():
    reset = False
    args = config.get_args()
    # logging setup
    prepare_logging()
    # setup affecting mode of operation
    prepare_operation()
    try:
        if args.resume:
            # resume from saved emulator state
            args.resume = state.load()
        # choose the video and sound backends
        prepare_console(args)
        if not args.resume:    
            # print greeting
            if not args.run and not config.options['exec'] and not args.conv:
                debugstr = ' [DEBUG mode]' if config.options['debug'] else ''
                if plat.stdin_is_tty:
                    console.write_line(greeting % (debugstr, var.total_mem))
            # execute arguments
            if args.run or args.load or args.conv and (args.program or stdin):
                program.load(oslayer.safe_open(args.program, "L", "R") if args.program else stdin)
            if args.conv and (args.outfile or stdout):
                program.save(oslayer.safe_open(args.outfile, "S", "W") if args.outfile else stdout, args.conv_mode)
                raise error.Exit()
            if args.run:
                config.options['exec'] = 'RUN'
            if config.options['exec']:    
                # start loop in execute mode
                run.execute(config.options['exec'])
        # start the interpreter loop
        # and get out, if we ran with -q
        run.loop(args.quit)
    except error.RunError as e:
        # errors during startup/conversion are handled here, then exit
        logging.error(error.get_message(e.err))
    except error.Exit:
        pass
    except error.Reset:
        reset = True
    except KeyboardInterrupt:
        if args.debug:
            raise
    finally:
        if reset:
            state.delete()
        else:   
            state.save()
        # fix the terminal on exit or crashes (inportant for ANSI terminals)
        console.close()
        iolayer.close_all()
        iolayer.close_devices()
            
def prepare_logging():
    """ Set logging format. """
    formatstr = '%(levelname)s: %(message)s'
    if config.options['debug']:
        logging.basicConfig(format=formatstr, level=logging.DEBUG)
    elif logfile:
        logging.basicConfig(format=formatstr, filename=os.path.join(plat.info_dir, logfile))
    else:
        logging.basicConfig(format=formatstr)
        
def prepare_operation():
    # implied RUN invocations
    if config.options['program'] and not config.options['load'] and not config.options['conv']:
        config.options['run'] = True   
    # set conversion output; first arg, if given, is mode; second arg, if given, is outfile
    config.options['conv_mode'] = 'A'
    config.options['outfile'] = ''
    conv = config.options['conv']
    if conv:
        conv = conv.split(':')
        try:
            config.options['conv_mode'] = conv.pop(0)
            config.options['outfile'] = conv.pop(0)
        except IndexError:
            pass    
        config.options['conv'] = True    
    # keep uppercase first letter    
    if config.options['conv_mode']:
        config.options['conv_mode'] = config.options['conv_mode'][0].upper() 

    
def prepare_console(args):
    # codepage needs to be loaded for dbcs to work correctly
    import redirect
    # video fallback
    if not console.init():
        logging.warning('Failed to initialise interface. Falling back to command-line interface.')
        backend.video = backend_cli
        if not backend.video or not console.init():
            logging.warning('Failed to initialise interface. Falling back to filter interface.')
            backend.video = novideo
    # sound fallback        
    if args.nosound:
        backend.sound = nosound
    if not sound.init_sound():
        logging.warning('Failed to initialise sound. Sound will be disabled.')
        backend.sound = nosound
    # gwbasic-style redirected output is split between graphical screen and redirected file    
    if args.output:
        redirect.set_output(oslayer.safe_open(args.output[0], "S", "W"))
    if args.input:
        redirect.set_input(oslayer.safe_open(args.input[0], "L", "R"))
    if args.capture_caps:
        console.ignore_caps = False
    if args.keys:
        for u in args.keys.decode('string_escape').decode('utf-8'):
            c = u.encode('utf-8')
            try:
                state.console_state.keybuf += unicodepage.from_utf8(c)
            except KeyError:
                state.console_state.keybuf += c
                

if __name__ == "__main__":
    main()
        
